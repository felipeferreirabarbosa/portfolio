{"version":3,"sources":["components/artigos/Curriculim_Vitae_Felipe_Ferreira_Barbosa.pdf","components/header/header.js","components/home/home.js","main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","lib","className","href","Home","m","s","pdf","Main","home","App","header","main","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kQCgBzBC,EAXA,kBACbC,EAAAC,EAAAC,cAACC,EAAA,IAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,UAAU,sBAChBJ,EAAAC,EAAAC,cAACC,EAAA,QAAD,CAASE,KAAK,KAAd,aACAL,EAAAC,EAAAC,cAACC,EAAA,QAAD,CAASE,KAAK,aAAd,YACAL,EAAAC,EAAAC,cAACC,EAAA,QAAD,CAASE,KAAK,iBAAd,gBACAL,EAAAC,EAAAC,cAACC,EAAA,QAAD,CAASE,KAAK,cAAd,oCCcSC,EAnBF,kBACXN,EAAAC,EAAAC,cAACC,EAAA,IAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,IAAD,CAAKI,EAAG,EAAGC,EAAG,KAGdR,EAAAC,EAAAC,cAACC,EAAA,IAAD,CAAKI,EAAG,EAAGC,EAAG,IACVR,EAAAC,EAAAC,cAAA,MAAIE,UAAU,YAAd,YACAJ,EAAAC,EAAAC,cAACC,EAAA,KAAD,KACEH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGG,KAAMI,KAAT,2BAGJT,EAAAC,EAAAC,cAAA,MAAIE,UAAU,YAAd,kBCHOM,EARF,kBACXV,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACC,EAAA,UAAD,KACEH,EAAAC,EAAAC,cAACS,EAAD,SCQSC,mLATX,OACEZ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACW,EAAD,MACAb,EAAAC,EAAAC,cAACY,EAAD,cALUC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.f2a90870.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Curriculim_Vitae_Felipe_Ferreira_Barbosa.8395c67e.pdf\";","// Importando o React\r\nimport React from \"react\";\r\n// Importando os components necessários da lib react-materialize\r\nimport { Navbar, NavItem, Row} from 'react-materialize';\r\n\r\nconst Header = () => (\r\n  <Row>\r\n    <Navbar className=\"blue-grey darken-4\">\r\n      <NavItem href='/'>Início</NavItem>\r\n      <NavItem href='/projects'>Projetos</NavItem>\r\n      <NavItem href='/social_media'>Redes Socias</NavItem>\r\n      <NavItem href='/curriculo'>Currículo</NavItem>\r\n    </Navbar>\r\n  </Row>\r\n);\r\n\r\nexport default Header;\r\n","// Importando o React\r\nimport React from \"react\";\r\n// Importando os components necessários da lib react-materialize\r\nimport { Row, Col, Card } from 'react-materialize';\r\n\r\nimport pdf from '../artigos/Curriculim_Vitae_Felipe_Ferreira_Barbosa.pdf'\r\nconst Home = () => (\r\n  <Row>\r\n    <Col m={3} s={12}>\r\n      {/* <UserProfile /> */}\r\n    </Col>\r\n    <Col m={8} s={12}>\r\n        <h5 className=\"subtitle\">About Me</h5>\r\n        <Card>\r\n          <div>\r\n            <a href={pdf}>Click here for my pdf</a>\r\n          </div>\r\n        </Card>\r\n        <h5 className=\"subtitle\">Experiences</h5>\r\n        {/* <Experience />\r\n        <Experience /> */}\r\n    </Col>\r\n  </Row>\r\n);\r\n\r\nexport default Home;\r\n","// Importando o React\r\nimport React from \"react\";\r\n// Importando o component Home\r\nimport Home from \"./components/home/home\";\r\n// Importando os components necessários da lib react-materialize\r\nimport { Container } from 'react-materialize';\r\n\r\nconst Main = () => (\r\n  <main>\r\n    <Container>\r\n      <Home />\r\n    </Container>\r\n  </main>\r\n);\r\n\r\nexport default Main;\r\n","// Importando o React\nimport React, { Component } from 'react';\n// Importando o Component Header\nimport Header from './components/header/header'\n// Importando o component Main\nimport Main from './main'\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Header />\n        <Main />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}